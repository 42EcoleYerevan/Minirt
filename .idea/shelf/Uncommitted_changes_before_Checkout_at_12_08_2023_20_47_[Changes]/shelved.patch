Index: includes/minirt.h
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>#ifndef MINIRT_H\r\n# define MINIRT_H\r\n\r\n# include <stdio.h>\r\n# include <stdlib.h>\r\n# include <math.h>\r\n# include <fcntl.h>\r\n# include <unistd.h>\r\n# include \"../libft/libft.h\"\r\n# include \"../minilibx/mlx.h\"\r\n# include \"./geometry.h\"\r\n\r\n# define WIDTH 300\r\n# define HEIGHT 300\r\n\r\n// parser\r\nint\t\tft_parser(char *filename, t_scene *scene);\r\n\r\n// readline\r\nchar\t*ft_readline(int fd);\r\n\r\n// parser arr utils\r\nint\t\tft_arrlen(char **arr);\r\nvoid\tft_free_arr(char **arr);\r\nchar\t**ft_arrjoin(char **arr, char *str);\r\nvoid\tft_print_2d_array(char **arr);\r\n\r\n//parser tokenizer\r\nchar\t**ft_tokenizer(char *path);\r\n\r\n// parser map\r\nint\t\tft_parse_map(char **lines, t_scene *scene);\r\n\r\n// parser shapes\r\nint\t\tft_set_shape(char **tokens, t_scene *scene);\r\n\r\n// math\r\nvoid\tft_vec_mult(t_vec *vec, float mult);\r\nvoid\tft_vec_mult_vec(t_vec *vec1, t_vec *vec2);\r\nvoid\tft_vec_mult_mat(t_vec *vec, t_mat *mat);\r\nvoid\tft_mat_mult_mat(t_mat *mat1, t_mat *mat2);\r\n\r\nt_vec\t*vec_substr(t_vec *vec1, t_vec *vec2);\r\nfloat\tvec_len(t_vec *vec);\r\nvoid\tvec_norm(t_vec *vec);\r\nfloat\tvec_mult_dot(t_vec *vec1, t_vec *vec2);\r\n\r\nvoid\terr_exit(char *str);\r\n\r\nt_vec\t\t*new_vector(float x, float y, float z);\r\nt_sphere\t*new_sphere(t_vec *vec, float radius);\r\nt_camera\t*new_camera(t_vec *origin, t_vec *direction, float fov);\r\nt_scene\t\t*new_scene(t_camera *cam, t_sphere *sphere);\r\nt_vplane\t*get_new_vplane(float width, float height, float fov);\r\n\r\nfloat\t\tsphere_inter(t_camera *cam, t_vec *ray, t_sphere *sphere);\r\nvoid\t\tray_tracing(void *mlx, void *win, t_scene *scene);\r\n\r\n#endif\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/includes/minirt.h b/includes/minirt.h
--- a/includes/minirt.h	
+++ b/includes/minirt.h	
@@ -7,14 +7,43 @@
 # include <fcntl.h>
 # include <unistd.h>
 # include "../libft/libft.h"
-# include "../minilibx/mlx.h"
+
+# ifdef __APPLE__
+# include "../mlx_mac/mlx.h"
+# elif __linux__
+# include "../mlx_linux/mlx.h"
+# endif
 # include "./geometry.h"
 
 # define WIDTH 300
 # define HEIGHT 300
 
+// validator
+int		ft_validator(char **lines);
+int		ft_is_valid_float(char *str);
+int		ft_is_valid_ambient(char **tokens);
+int		ft_is_valid_cam(char **lines);
+int		ft_is_valid_num_of_cams(char **lines);
+int		ft_is_valid_color(char *str);
+int		ft_is_valid_vector(char *str);
+int		ft_is_valid_fov(char *str);
+int		ft_is_valid_direction(char *str);
+int		ft_is_valid_light(char **tokens);
+int		ft_is_valid_sphere(char **tokens);
+int		ft_is_valid_plane(char **tokens);
+int		ft_is_valid_cylinder(char **tokens);
+
 // parser
 int		ft_parser(char *filename, t_scene *scene);
+char	**ft_split_line(char *line);
+
+// parser utils
+float	ft_atof(char *str);
+int		ft_str_to_int(char *str);
+int		ft_len_after_dot(char *str);
+int		ft_len_before_dot(char *str);
+float	ft_str_to_int_part(char *str);
+float	ft_str_to_decimal_part(char *str);
 
 // readline
 char	*ft_readline(int fd);
@@ -31,29 +60,4 @@
 // parser map
 int		ft_parse_map(char **lines, t_scene *scene);
 
-// parser shapes
-int		ft_set_shape(char **tokens, t_scene *scene);
-
-// math
-void	ft_vec_mult(t_vec *vec, float mult);
-void	ft_vec_mult_vec(t_vec *vec1, t_vec *vec2);
-void	ft_vec_mult_mat(t_vec *vec, t_mat *mat);
-void	ft_mat_mult_mat(t_mat *mat1, t_mat *mat2);
-
-t_vec	*vec_substr(t_vec *vec1, t_vec *vec2);
-float	vec_len(t_vec *vec);
-void	vec_norm(t_vec *vec);
-float	vec_mult_dot(t_vec *vec1, t_vec *vec2);
-
-void	err_exit(char *str);
-
-t_vec		*new_vector(float x, float y, float z);
-t_sphere	*new_sphere(t_vec *vec, float radius);
-t_camera	*new_camera(t_vec *origin, t_vec *direction, float fov);
-t_scene		*new_scene(t_camera *cam, t_sphere *sphere);
-t_vplane	*get_new_vplane(float width, float height, float fov);
-
-float		sphere_inter(t_camera *cam, t_vec *ray, t_sphere *sphere);
-void		ray_tracing(void *mlx, void *win, t_scene *scene);
-
-#endif
+// parser 
\ No newline at end of file
Index: srcs/error.c
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>#include \"minirt.h\"\r\n\r\nvoid\terr_exit(char *str)\r\n{\r\n\twhile(*str)\r\n\t\twrite(2, str++, 1);\r\n\texit(1);\r\n}\r\n
===================================================================
diff --git a/srcs/error.c b/srcs/error.c
--- a/srcs/error.c	
+++ b/srcs/error.c	
@@ -2,7 +2,9 @@
 
 void	err_exit(char *str)
 {
+    int val;
 	while(*str)
-		write(2, str++, 1);
-	exit(1);
+		val = write(2, str++, 1);
+    (void)val;
+    exit(1);
 }
